include "fuzzy"
| include "test"

| def test_levenshtein():
    let result1 = levenshtein("flaw", "lawn")
    | assert_eq(result1, 2)

    | let result2 = levenshtein("", "")
    | assert_eq(result2, 0)

    | let result3 = levenshtein("a", "")
    | assert_eq(result3, 1)

    | let result4 = levenshtein("", "a")
    | assert_eq(result4, 1)

    | let result5 = levenshtein("abc", "abc")
    | assert_eq(result5, 0)
  end

| def test_jaro_winkler():
    let result1 = jaro_winkler("flaw", "lawn")
    | assert(result1 > 0 && result1 < 1)

    | let result2 = jaro_winkler("", "")
    | assert_eq(result2, 1)

    | let result3 = jaro_winkler("a", "")
    | assert_eq(result3, 0)

    | let result4 = jaro_winkler("", "a")
    | assert_eq(result4, 0)

    | let result5 = jaro_winkler("abc", "abc")
    | assert_eq(result5, 1)
  end

| def test_fuzzy_best_match():
    let result1 = fuzzy_best_match("lawn", "lawn")
    | assert_eq(result1,  {"score": 1, "text": "lawn"})

    | let result2 = fuzzy_best_match("lawn", ["flaw", "lawn", "pawn"])
    | assert_eq(result2, {"score": 1, "text": "lawn"})

    | let result3 = fuzzy_best_match("flaw", ["lawn", "flaw", "claw"])
    | assert_eq(result3, {"score": 1, "text": "flaw"})

    | let result4 = fuzzy_best_match("flaw", ["lawn", "claw"])
    | assert(result4["score"] < 1 && (result4["text"] == "lawn" || result4["text"] == "claw"))

    | let result5 = fuzzy_best_match("flaw", [])
    | assert_eq(result5, None)
  end

|

run_tests([
  test_case("Levenshtein Distance", test_levenshtein),
  test_case("Jaro-Winkler Distance", test_jaro_winkler),
  test_case("Fuzzy Best Match", test_fuzzy_best_match)
])
