# Halts execution with error code 5
def halt_error(): halt(5);

# Checks if input is an array
def is_array(a): type(a) == "array";

# Checks if input is markdown
def is_markdown(m): type(m) == "markdown";

# Checks if input is a boolean
def is_bool(b): type(b) == "bool";

# Checks if input is a number
def is_number(n): type(n) == "number";

# Checks if input is a string
def is_string(s): type(s) == "string";

# Checks if input is None
def is_none(n): type(n) == "None";

# Checks if input is a dictionary
def is_dict(d): type(d) == "dict";

# Checks if string contains a substring
def contains(haystack, needle):
  if (is_dict(haystack)):
    not(is_none(get(haystack, needle)))
  else:
    index(haystack, needle) != -1
end

# Removes prefix string from input if it exists
def ltrimstr(s, left):
  if (starts_with(s, left)):
    slice(s, index(s, left) + len(left), len(s))
  else:
    s
end

# Removes suffix string from input if it exists
def rtrimstr(s, right):
  if (ends_with(s, right)):
    slice(s, 0, sub(len(s), len(right)))
  else:
    s
end

# Checks if string, array or dict is empty
def is_empty(s):
  if (or(is_string(s), is_array(s), is_dict(s))):
    len(s) == 0
  else:
    false
end

# Tests if string matches a pattern
def test(s, pattern): match(s, pattern) | is_empty() | not();

# Returns value if condition is true, None otherwise
def select(v, f): if (f): v;

# Returns array if input is array, None otherwise
def arrays(a): select(a, is_array(a));

# Returns markdown if input is markdown, None otherwise
def markdowns(m): select(m, is_markdown(m));

# Returns boolean if input is boolean, None otherwise
def booleans(b): select(b, is_bool(b));

# Returns number if input is number, None otherwise
def numbers(n): select(n, is_number(n));

# Formats a date to ISO 8601 format (YYYY-MM-DDTHH:MM:SSZ)
def to_date_iso8601(d): to_date(d, "%Y-%m-%dT%H:%M:%SZ");

# Converts input to an array
def to_array(a): if (is_array(a)): a else: array(a);

# Applies a given function to each element of the provided array and returns a new array with the results.
def map(v, f):
  let map_dict = fn(v, f):
      let mapped = foreach (x, entries(v)): f(x); | dict(mapped);

  | if (is_dict(v)):
    map_dict(v, f)
  else:
    foreach (x, v): f(x);
end

# Filters the elements of an array based on a provided callback function.
def filter(v, f):
  let filter_dict = fn(v, f):
      let fileted = foreach (x, entries(v)): select(x, f(x)); | dict(compact(fileted));

  | let _filter = fn(v, f):
      foreach (x, v): select(x, f(x)); | compact();

  | if (is_dict(v)):
    filter_dict(v, f)
  else:
    _filter(v, f)
end

# Returns the first element of an array
def first(arr):
  if (is_empty(arr)):
    None
  else:
    get(arr, 0)
end

# Returns the last element of an array
def last(arr):
  if (is_empty(arr)):
    None
  else:
    get(arr, sub(len(arr), 1))
end

# Returns the second element of an array
def second(arr):
  if (len(arr) < 2):
    None
  else:
    get(arr, 1)
end

# Checks if markdown is h1 heading
def is_h1(md): to_md_name(md) == "h1";

# Checks if markdown is h2 heading
def is_h2(md): to_md_name(md) == "h2";

# Checks if markdown is h3 heading
def is_h3(md): to_md_name(md) == "h3";

# Checks if markdown is h4 heading
def is_h4(md): to_md_name(md) == "h4";

# Checks if markdown is h5 heading
def is_h5(md): to_md_name(md) == "h5";

# Checks if markdown is h6 heading
def is_h6(md): to_md_name(md) == "h6";

# Checks if markdown is heading
def is_h(md): or(is_h1(md), is_h2(md), is_h3(md), is_h4(md), is_h5(md), is_h6(md));

# Checks if markdown is a heading of the specified level (1-6)
def is_h_level(md, level):
  if (level == 1):
    is_h1(md)
  elif (level == 2):
    is_h2(md)
  elif (level == 3):
    is_h3(md)
  elif (level == 4):
    is_h4(md)
  elif (level == 5):
    is_h5(md)
  elif (level == 6):
    is_h6(md)
  else:
    error("Invalid heading level: " + to_string(level))
end

# Checks if markdown is not an h1 heading
def is_not_h1(md): is_h1(md) | not();

# Checks if markdown is not an h2 heading
def is_not_h2(md): is_h2(md) | not();

# Checks if markdown is not an h3 heading
def is_not_h3(md): is_h3(md) | not();

# Checks if markdown is not an h4 heading
def is_not_h4(md): is_h4(md) | not();

# Checks if markdown is not an h5 heading
def is_not_h5(md): is_h5(md) | not();

# Checks if markdown is not an h6 heading
def is_not_h6(md): is_h6(md) | not();

# Checks if markdown is emphasis
def is_em(md): to_md_name(md) == "emphasis";

# Checks if markdown is html
def is_html(md): to_md_name(md) == "html";

# Checks if markdown is yaml
def is_yaml(md): to_md_name(md) == "yaml";

# Checks if markdown is toml
def is_toml(md): to_md_name(md) == "toml";

# Checks if markdown is code block
def is_code(md): to_md_name(md) == "code";

# Checks if markdown is text
def is_text(text): to_md_name(text) == "text";

# Checks if markdown is list
def is_list(list): to_md_name(list) == "list";

# Checks if markdown node's URL matches a specified URL
def matches_url(node, url): get_url(node) == url;

# Checks if markdown is MDX Flow Expression
def is_mdx_flow_expression(mdx): to_md_name(mdx) == "mdx_flow_expression";

# Checks if markdown is MDX Jsx Flow Element
def is_mdx_jsx_flow_element(mdx): to_md_name(mdx) == "mdx_jsx_flow_element";

# Checks if markdown is MDX Jsx Text Element
def is_mdx_jsx_text_element(mdx): to_md_name(mdx) == "mdx_jsx_text_element";

# Checks if markdown is MDX Text Expression
def is_mdx_text_expression(mdx): to_md_name(mdx) == "mdx_text_expression";

# Checks if markdown is MDX Js Esm
def is_mdx_js_esm(mdx): to_md_name(mdx) == "mdx_js_esm";

# Checks if markdown is MDX
def is_mdx(mdx): or(
  is_mdx_flow_expression(mdx),
  is_mdx_jsx_flow_element(mdx),
  is_mdx_jsx_text_element(mdx),
  is_mdx_text_expression(mdx),
  is_mdx_js_esm(mdx))
end

# Convert csv string to markdown table row
def csv2table_row(row): split(row, ",") | to_md_table_row();

# Convert csv string to markdown table
def csv2table(csv): map(csv, csv2table_row);

# Returns an array of length n filled with the given value.
def fill(value, n):
  if (n < 0):
    error("n must be non-negative")
  else:
    foreach (i, range(0, n)): value;
end

def _csv_header(csv_or_tsv, sep):
  let head = first(csv_or_tsv)
  | join(fill("---", sub(len(split(head, sep)), 1)), sep)
end

# Converts a CSV string array to a markdown table.
def csv2table_with_header(csv):
  let csv_with_header = insert(csv, 1, _csv_header(csv, ","))
  | map(csv_with_header, csv2table_row)
end

# Convert tsv string to markdown table row
def tsv2table_row(row): split(row, "\t") | to_md_table_row();

# Convert tsv string to markdown table
def tsv2table(tsv): map(tsv, tsv2table_row);

# Converts a CSV string array to a markdown table.
def tsv2table_with_header(tsv):
  let tsv_with_header = insert(tsv, 1, _csv_header(tsv, "\t"))
  | map(tsv_with_header, tsv2table_row)
end

# Verifies that a condition is true and raises an error if it's false.
def assert(cond):
  if (cond):
    self
  else:
    error("Assertion failed: It is not true.")
end

# Prints the debug information of the given value.
def debug(msg):
  let s = to_string(msg) | stderr(s"DEBUG: ${s}");

# Sorts an array using a key function that extracts a comparable value for each element.
def sort_by(arr, f):
  let decorate_arr = foreach (x, arr): [f(x), x]; | _sort_by_impl(decorate_arr) | map(second);

# Skips the first n elements of an array and returns the rest
def skip(arr, n):
  if (n < 0):
    error("n must be non-negative")
  elif (n > len(arr)): []
  else:
    slice(arr, n, len(arr))
end

# Takes the first n elements of an array
def take(arr, n):
  if (n < 0):
    error("n must be non-negative")
  elif (n > len(arr)):
    arr
  else:
    slice(arr, 0, n)
end

# Returns the index of the first element in an array that satisfies the provided function.
def find_index(arr, f):
  let _find_index_impl = fn(arr, f, idx):
      if (idx == len(arr)):
        -1
      elif (f(get(arr, idx))):
        idx
      else:
        _find_index_impl(arr, f, idx + 1);

  | if (not(is_array(arr))):
    error("first argument must be an array")
  else:
    _find_index_impl(arr, f, 0)
end

# Skips elements from the beginning of an array while the provided function returns true
def skip_while(arr, f):
  let i = 0
  | let si =
  if (not(is_array(arr))):
    error("first argument must be an array")
  elif (is_empty(arr)):
    0
  else:
    until (and(i < len(arr), f(get(arr, i)))):
      let i = i + 1 | i;
  | if (is_none(si)): []
  else:
    slice(arr, si, len(arr))
end

# Takes elements from the beginning of an array while the provided function returns true
def take_while(arr, f):
  let i = 0
  | let ti =
  if (not(is_array(arr))):
    error("first argument must be an array")
  elif (is_empty(arr)):
    0
  else:
    until (and(i < len(arr), f(get(arr, i)))):
      let i = i + 1 | i;
  | if (is_none(ti)): []
  else:
    slice(arr, 0, ti)
end

# Groups elements of an array by the result of applying a function to each element
def group_by(arr, f):
  let i = 0
  | let groups = dict()
  | if (not(is_array(arr))):
    error("first argument must be an array")
  elif (is_empty(arr)):
    dict()
  else:
    until (not(is_none(get(arr, i)))):
      let v = get(arr, i)
      | let i = i + 1
      | let key = to_string(f(v))
      | let existing = get(groups, key)
      | let new_group = if (is_none(existing)): [v] else: existing + v
      | let groups = set(groups, key, new_group)
      | groups
    end
end

# Returns true if any element in the array satisfies the provided function.
def any(v, f): if (is_empty(v)): false else: len(filter(v, f)) != 0;

# Returns true if all element in the array satisfies the provided function.
def all(v, f): if (is_empty(v)): true else: len(filter(v, f)) == len(v);

# Returns true if the element is in the array.
def in(v, elem):
  if (is_array(v)):
    if (is_array(elem)):
      all(elem, fn(x): in(v, x);)
    else:
      any(v, fn(x): x == elem;)
  else:
    contains(v, elem)
end

# Converts the given value to a CSV.
def to_csv(v): if (is_array(v)): join(v, ",") else: to_string(v);

# Converts the given value to a TSV.
def to_tsv(v): if (is_array(v)): join(v, "\t") else: to_string(v);

# Reduces an array to a single value by applying a function, starting from an initial value.
def fold(arr, init, f):
  let acc = init
  | let i = 0
  | if (not(is_array(arr))):
    error("first argument must be an array")
  elif (is_empty(arr)):
    init
  else:
    until (i != len(arr)):
      let acc = f(acc, get(arr, i))
      | let i = i + 1
      | acc
    end
end

# Returns a new array with duplicate elements removed, comparing by the result of the provided function.
def unique_by(arr, f):
  let seen = dict()
  | let result = []
  | let i = 0
  | if (not(is_array(arr))):
    error("first argument must be an array")
  elif (is_empty(arr)): []
  else:
    until (i != len(arr)):
      let item = get(arr, i)
      | let key = to_string(f(item))
      | let already_seen = get(seen, key)
      | let result = if (is_none(already_seen)): result + item else: result
      | let seen = if (is_none(already_seen)): set(seen, key, true) else: seen
      | let i = i + 1
      | result
    end
end

# Returns the input value unchanged.
def identity(x): x;

# Returns an array of sections, each section is an array of markdown nodes between the specified header and the next header of the same level.
def sections(md_nodes, level):
  let indices = foreach (i, range(sub(len(md_nodes), 1))):
      let n = get(md_nodes, i)
      | if (is_h_level(n, level)): i;
  | let indices = compact(indices)
  | let indices_with_end = indices + len(md_nodes)
  | let result = []
  | let i = 0
  | until (i < len(indices)):
      let start_node = get(indices, i)
      | let end_node = get(indices_with_end, i + 1)
      | let section = slice(md_nodes, start_node, end_node)
      | let result = result + [section]
      | let i = i + 1
      | result
    end
end
